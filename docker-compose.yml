services:
  backend:
    build:
      context: ./app-backend
      dockerfile: Dockerfile
    container_name: e-ticaret-backend
    ports:
      - '3000:3000'
    depends_on:
      - mongodb
      - redis
    environment:
      - MONGO_URI=mongodb://mongodb:27017/e-ticaret
      - JWT_SECRET=supersecret
    volumes:
      - ./app-backend:/app
      
  frontend:
    build:
      context: ./app-frontend
      dockerfile: Dockerfile
    container_name: e-ticaret-frontend
    ports:
      - "8080:8080"
    volumes:
      - ./app-frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3000


  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  payment-service:
    build:
      context: ./microservices/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - '3001:3001'
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka

  invoice-service:
    build:
      context: ./microservices/invoice-service
      dockerfile: Dockerfile
    container_name: invoice-service
    ports:
      - '3002:3002'
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db

volumes:
  mongo-data: